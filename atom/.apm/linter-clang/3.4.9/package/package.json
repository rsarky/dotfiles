{"name":"linter-clang","main":"./lib/main","version":"3.4.9","description":"Lint C-based files using clang","repository":{"type":"git","url":"git+https://github.com/AtomLinter/linter-clang.git"},"license":"MIT","engines":{"atom":">0.50.0"},"scripts":{"test":"apm test","lint":"eslint ."},"providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"dependencies":{"atom-linter":"^9.0.0","atom-package-deps":"^4.0.1","clang-flags":"^0.2.2"},"devDependencies":{"eslint":"^3.13.0","eslint-config-airbnb-base":"^11.0.1","eslint-plugin-import":"^2.2.0"},"package-deps":["linter"],"eslintConfig":{"extends":"airbnb-base","rules":{"global-require":"off","import/no-unresolved":["error",{"ignore":["atom"]}]},"globals":{"atom":true},"env":{"browser":true,"node":true}},"readme":"# linter-clang\n\n[![Travis.ci Shield](https://img.shields.io/travis/AtomLinter/linter-clang/master.svg?style=flat-square&label=linux)](https://travis-ci.org/AtomLinter/linter-clang)\n[![Travis.ci Shield](https://img.shields.io/travis/AtomLinter/linter-clang/master.svg?style=flat-square&label=os%20x)](https://travis-ci.org/AtomLinter/linter-clang)\n[![AppVeyor Sheild](https://img.shields.io/appveyor/ci/AtomLinter/linter-clang/master.svg?style=flat-square&label=windows)](https://ci.appveyor.com/project/kepler0/linter-clang)\n\nThis linter plugin for [Linter](https://github.com/AtomLinter/Linter) provides an interface to clang. It will be used with files that have the \"C++\", \"C\", \"Objective-C\" and \"Objective-C++\" syntax.\n\n### Plugin installation\nInstall from the Settings pane of Atom by searching for and installing the `linter-clang` package.\n\nOr install from your Command Prompt by running:\n```\n$ apm install linter-clang\n```\n\nThis package will ensure that all dependencies are installed on activation.\n\n## Project-specific settings\n\n### .clang_complete\nIf your project has some extra include directories, put them in a file called \".clang_complete\" and list them line by line.\nThe linter will open the file and use the specified paths when linting in your project.\n\n```\n-Iinclude\n-Ilib/foo/include\n```\nPlease note the file should contain one command line argument per line.\nThese arguments are passed to clang directly using exec and not via a shell.\nTherefore any spaces are treated as a part of the command line argument.\n\nThis means on the one hand `-I include` results in clang using ` include` (note the space at the beginning) as include directory.\nFor the same reason `-I include -I lib/foo/include` causes clang to search for includes in ` include -I lib/foo/include`.\n\nOn the other hand if your path contains spaces you must not escape them or put quotes around the path.\nFor example: `-Ilib/dir with spaces/include` only works without any quotes or escaping.\n\n### Clang JSON Compilation Database\nThe [Clang JSON Compilation Database](http://clang.llvm.org/docs/JSONCompilationDatabase.html) is also a supported format for project specific settings.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/AtomLinter/linter-clang/issues"},"homepage":"https://github.com/AtomLinter/linter-clang#readme","_id":"linter-clang@3.4.9","_shasum":"d187591ef1c7125800dfe1c5ebc52b6b22030bcf","_resolved":"file:../d-117228-4749-17nhpz5/package.tgz","_from":"../d-117228-4749-17nhpz5/package.tgz"}